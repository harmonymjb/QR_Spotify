Projected Scope
===============

The projected scope of the QR_Music_1.0 Project

Python Code and Purpose
=======================

The purpose of the Python code here in, is to operate music systems using physical objects as a point of reference to refer to Playlists, Tracks, Pieces, Albums, or collections of Artists via available music playing devices and services.

The python code here currently does the following:
    1. Connects locally with mpd (http://www.musicpd.org/) to start playlists using QR codes in plain text that reference the named playlist avaiable to mpd.
    2. Connects via qdbus os commands to a linux-based local spotify desktop client and plays uri links via spotify's service. (https://developer.spotify.com/) (https://github.com/olejon/spotcommander)
    3. Connects using the internet via desktop client to access the Spoitfy web API (https://developer.spotify.com/web-api/) via spotipy (http://spotipy.readthedocs.org/en/latest/) to create file collections of Albums, including metadata, through a given name in a search terminal.

    Users can generate qrcodes via the provided (and automatically generated) qr codes, particularly artist_search.png. Scanning this code through this qr code, or via calling the artist_search_loop() function in album_search.py will enter a terminal user into a text based search and reply terminal that utilises the Spotify web API.

    Genereated QR codes can then be scanned to begin playing the spotify uri link referenced in plain text on the QR code.

    Any QR code, generated or printed on any device, referencing and spotify:***:*** uri link will attempt to play the referenced Track, Album, Artist, or Playlist through spotify's desktop client.

    QR codes that reference playlists available to mpd (checked via the probe_playlists function), will attempt to be played via mpd. QR codes are encoded in plain text conataning the same name as the available playlist.

    The code works at preventing multiple scans from inturrupting playback (for situations such as a code on a scanner bed), and from inturrupting or incorrectly interacting streams from mpd and spotify if both are in use.

    The included codes call qdbus commands via MediaPlayer2.Player (http://specifications.freedesktop.org/mpris-spec/latest/Player_Interface.html) to control spotify, but have no effect when spotify is not running.

    The same included codes also call mpd commands via python-mpd2 (https://github.com/Mic92/python-mpd2).

Future Python Postmarks
=======================

Configure mpd to automatically search and import audio. Have it create appropriate playlists on the fly. Read tags and categorize items accordingly.

Configigure spotify Oauth for playlist creation and reading.

Add support for SoundCould.

Configure support for Raspberry Pi and Berry HiFi DAC.

Future Platform Postmarks
=========================

Create database with addtional metadata specifically for storing information related to classical music.

Enable support for android devices.

Create web interface for QR generation.
